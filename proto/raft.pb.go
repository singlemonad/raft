// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OperateType int32

const (
	OperateType_Invalid OperateType = 0
	OperateType_Get     OperateType = 1
	OperateType_Put     OperateType = 2
	OperateType_Delete  OperateType = 3
)

var OperateType_name = map[int32]string{
	0: "Invalid",
	1: "Get",
	2: "Put",
	3: "Delete",
}

var OperateType_value = map[string]int32{
	"Invalid": 0,
	"Get":     1,
	"Put":     2,
	"Delete":  3,
}

func (x OperateType) String() string {
	return proto.EnumName(OperateType_name, int32(x))
}

func (OperateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

type Role int32

const (
	Role_Follower  Role = 0
	Role_Candidate Role = 1
	Role_Leader    Role = 2
)

var Role_name = map[int32]string{
	0: "Follower",
	1: "Candidate",
	2: "Leader",
}

var Role_value = map[string]int32{
	"Follower":  0,
	"Candidate": 1,
	"Leader":    2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

type KV struct {
	Op                   OperateType `protobuf:"varint,1,opt,name=op,proto3,enum=raft.OperateType" json:"op,omitempty"`
	Key                  string      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KV) Reset()         { *m = KV{} }
func (m *KV) String() string { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()    {}
func (*KV) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *KV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KV.Unmarshal(m, b)
}
func (m *KV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KV.Marshal(b, m, deterministic)
}
func (m *KV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KV.Merge(m, src)
}
func (m *KV) XXX_Size() int {
	return xxx_messageInfo_KV.Size(m)
}
func (m *KV) XXX_DiscardUnknown() {
	xxx_messageInfo_KV.DiscardUnknown(m)
}

var xxx_messageInfo_KV proto.InternalMessageInfo

func (m *KV) GetOp() OperateType {
	if m != nil {
		return m.Op
	}
	return OperateType_Invalid
}

func (m *KV) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KV) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("raft.OperateType", OperateType_name, OperateType_value)
	proto.RegisterEnum("raft.Role", Role_name, Role_value)
	proto.RegisterType((*KV)(nil), "raft.KV")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x9b, 0x4d, 0x6d, 0xed, 0xd4, 0xc8, 0x3a, 0x78, 0x28, 0x3d, 0x55, 0x4f, 0xa5, 0x62,
	0x85, 0x7a, 0xf1, 0x2a, 0xfe, 0x42, 0x54, 0x2a, 0x41, 0x7a, 0xdf, 0x92, 0x57, 0x09, 0xae, 0xd9,
	0x75, 0x33, 0xa9, 0xf4, 0xbf, 0x97, 0x24, 0x17, 0xbd, 0x78, 0xfb, 0xde, 0x63, 0xbe, 0xc3, 0x1b,
	0xa2, 0x60, 0x36, 0x32, 0xf7, 0xc1, 0x89, 0xe3, 0x6e, 0xcd, 0xe3, 0xe4, 0x13, 0x65, 0x69, 0xde,
	0xd1, 0x96, 0xa7, 0x4b, 0x52, 0x4f, 0x2b, 0x3e, 0x21, 0xe5, 0xfc, 0x28, 0x9a, 0x44, 0xd3, 0xc3,
	0xc5, 0xd1, 0xbc, 0x71, 0x96, 0x1e, 0xc1, 0x08, 0xde, 0x76, 0x1e, 0xa9, 0x72, 0x9e, 0x35, 0xc5,
	0x1f, 0xd8, 0x8d, 0xd4, 0x24, 0x9a, 0x0e, 0xd2, 0x1a, 0xf9, 0x98, 0xf6, 0xb6, 0xc6, 0x56, 0x18,
	0xc5, 0x4d, 0xd7, 0x86, 0xd9, 0x15, 0x0d, 0x7f, 0xa9, 0x3c, 0xa4, 0xfe, 0x63, 0xb1, 0x35, 0x36,
	0xcf, 0x74, 0x87, 0xfb, 0x14, 0x3f, 0x40, 0x74, 0x54, 0xc3, 0x6b, 0x25, 0x5a, 0x31, 0x51, 0xef,
	0x16, 0x16, 0x02, 0x1d, 0xcf, 0x2e, 0xa8, 0x9b, 0x3a, 0x0b, 0x3e, 0xa0, 0xfd, 0x7b, 0x67, 0xad,
	0xfb, 0x46, 0xd0, 0x1d, 0x4e, 0x68, 0x70, 0x63, 0x8a, 0x2c, 0xcf, 0x8c, 0x40, 0x47, 0xb5, 0xf0,
	0x0c, 0x93, 0x21, 0x68, 0xb5, 0x58, 0x53, 0x37, 0x35, 0x1b, 0xe1, 0x33, 0x1a, 0xa6, 0xf8, 0xaa,
	0x50, 0xca, 0xca, 0x09, 0x38, 0x69, 0x07, 0xbc, 0xb4, 0x3b, 0xc7, 0x7f, 0x23, 0x9f, 0x53, 0x72,
	0xed, 0x3d, 0x8a, 0xec, 0xae, 0x90, 0x90, 0xa3, 0xfc, 0xff, 0x7c, 0xdd, 0x6b, 0xde, 0x74, 0xf9,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x52, 0x3f, 0x77, 0x72, 0x49, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	RequestVote(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	AppendEntries(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/raft.Raft/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/raft.Raft/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	RequestVote(context.Context, *Message) (*Message, error)
	AppendEntries(context.Context, *Message) (*Message, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) RequestVote(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (*UnimplementedRaftServer) AppendEntries(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
